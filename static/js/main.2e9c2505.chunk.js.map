{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","responsiveFontSizes","App","props","state","loaded","this","setState","className","Fade","in","timeout","ThemeProvider","Typography","variant","IconButton","color","size","style","aria-label","Link","href","target","fontSize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gXAYIA,EAAQC,cACZD,EAAQE,YAAoBF,G,IAqDbG,E,YAlDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,QAAQ,GAHM,E,iFAQhBC,KAAKC,SAAS,CAACF,QAAQ,M,+BAIvB,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cACd,kBAACC,EAAA,EAAD,CAAMC,GAAIJ,KAAKF,MAAMC,OAAQM,QAAS,KACpC,6BACE,kBAACC,EAAA,EAAD,CAAeb,MAAOA,GACpB,kBAACc,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAApB,sCAGA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,SAApB,2EAQA,kBAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,KAAK,SAASC,MAAO,CAACF,MAAO,SAAUG,aAAW,YAC5E,kBAACC,EAAA,EAAD,CAAMC,KAAK,0CAA0CL,MAAM,UAAUM,OAAO,UAC1E,kBAAC,IAAD,CAAcC,SAAS,YAG3B,kBAACR,EAAA,EAAD,CAAYC,MAAM,UAAUC,KAAK,SAASC,MAAO,CAACF,MAAO,SAAUG,aAAW,aAC5E,kBAACC,EAAA,EAAD,CAAMC,KAAK,yCAAyCL,MAAM,UAAUM,OAAO,UACzE,kBAAC,IAAD,CAAeC,SAAS,qB,GAtC5BC,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2e9c2505.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { Typography } from '@material-ui/core';\nimport Fade from '@material-ui/core/Fade';\nimport IconButton from '@material-ui/core/IconButton';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport Link from '@material-ui/core/Link';\n\nlet theme = createMuiTheme();\ntheme = responsiveFontSizes(theme);\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded: false,\n    }\n  }\n\n  componentDidMount(){\n    this.setState({loaded: true});\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <Fade in={this.state.loaded} timeout={2000}>\n              <div>\n                <ThemeProvider theme={theme}>\n                  <Typography variant=\"h1\">Marco Cadei</Typography>\n                  <Typography variant=\"body2\">\n                    Software Engineer @ Bending Spoons  \n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Computer Science & Engineering Master's Student @ University of Brescia\n                  </Typography>\n                  {/* <IconButton color=\"primary\" size=\"medium\" style={{color: \"white\"}} aria-label=\"Resume (CV)\">\n                    <Link href=\"https://www.linkedin.com/in/marcocadei/\" color=\"inherit\" target=\"_blank\">\n                      <DescriptionIcon fontSize=\"large\" />\n                    </Link>\n                  </IconButton> */}\n                  <IconButton color=\"primary\" size=\"medium\" style={{color: \"white\"}} aria-label=\"Linkedin\">\n                    <Link href=\"https://www.linkedin.com/in/marcocadei/\" color=\"inherit\" target=\"_blank\">\n                      <LinkedInIcon fontSize=\"large\" />\n                    </Link>\n                  </IconButton>\n                  <IconButton color=\"primary\" size=\"medium\" style={{color: \"white\"}} aria-label=\"Instagram\">\n                    <Link href=\"https://www.instagram.com/marco_cadei/\" color=\"inherit\" target=\"_blank\">\n                      <InstagramIcon fontSize=\"large\" />\n                    </Link>\n                  </IconButton>\n                </ThemeProvider>\n              </div>\n            </Fade>\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}